import numpy as np
import matplotlib.pyplot as plt

# Configuration
samplingFrequency = 1000  # Sampling frequency (Hz)
time_cont = np.linspace(0, 1, 1000)  # Time vector for continuous signal
time_disc = np.arange(0, 1, 1/samplingFrequency)  # Time vector for discrete signal

# Signal Parameters
frequency_signal = 5  # Frequency of the sinusoidal wave
signal_amplitude = 1

# Signal Generation (Sinusoidal)
continuous_sine_wave = signal_amplitude * np.sin(2 * np.pi * frequency_signal * time_cont)
discrete_sine_wave = signal_amplitude * np.sin(2 * np.pi * frequency_signal * time_disc)

# Add Noise to the Signal
noise_level = 0.5  # Noise amplitude
noisy_continuous_signal = continuous_sine_wave + noise_level * np.random.randn(len(continuous_sine_wave))
noisy_discrete_signal = discrete_sine_wave + noise_level * np.random.randn(len(discrete_sine_wave))

# Plot the Noisy Signal
plt.figure(figsize=(12, 6))
plt.subplot(2, 2, 1)
plt.plot(time_cont, noisy_continuous_signal, label="Noisy Continuous Signal", color='orange')
plt.title("Noisy Continuous Signal")
plt.legend()

plt.subplot(2, 2, 2)
plt.stem(time_disc, noisy_discrete_signal, label="Noisy Discrete Signal", basefmt=" ", linefmt="orange")
plt.title("Noisy Discrete Signal")
plt.legend()

# 1. Moving Average Filter (Smoothing)
window_size = 20  # Number of samples in the moving average window

# Apply Moving Average to Smooth the Noisy Signals
smoothedContinuousSignal = np.convolve(noisy_continuous_signal, np.ones(window_size)/window_size, mode='same')
smoothedDiscreteSignal = np.convolve(noisy_discrete_signal, np.ones(window_size)/window_size, mode='same')

# Plot the Smoothed Signals
plt.subplot(2, 2, 3)
plt.plot(time_cont, smoothedContinuousSignal, label="Smoothed Continuous Signal", color='blue')
plt.title("Smoothed Continuous Signal (Moving Average)")
plt.legend()

plt.subplot(2, 2, 4)
plt.stem(time_disc, smoothedDiscreteSignal, label="Smoothed Discrete Signal", basefmt=" ", linefmt="blue")
plt.title("Smoothed Discrete Signal (Moving Average)")
plt.legend()

plt.tight_layout()
plt.show()

# 2. Noise Reduction (Low-pass Filter - Simple Example)
from scipy.signal import butter, filtfilt

# Low-pass filter design (cut-off frequency = 10 Hz)
def butter_lowpass(cutoff, fs, order=5):
    nyquist = 0.5 * fs
    normal_cutoff = cutoff / nyquist
    b, a = butter(order, normal_cutoff, btype='low', analog=False)
    return b, a

# Apply the low-pass filter
cutoff_frequency = 10  # 10 Hz cutoff frequency for low-pass filter
b, a = butter_lowpass(cutoff_frequency, sampling_frequency)
filtered_continuous_signal = filtfilt(b, a, noisy_continuous_signal)
filtered_discrete_signal = filtfilt(b, a, noisy_discrete_signal)

# Plot the Filtered Signals
plt.figure(figsize=(12, 6))
plt.subplot(2, 2, 1)
plt.plot(time_continuous, filtered_continuous_signal, label="Filtered Continuous Signal", color='green')
plt.title("Filtered Continuous Signal (Low-pass Filter)")
plt.legend()

plt.subplot(2, 2, 2)
plt.stem(time_discrete, filtered_discrete_signal, label="Filtered Discrete Signal", basefmt=" ", linefmt="green")
plt.title("Filtered Discrete Signal (Low-pass Filter)")
plt.legend()

plt.tight_layout()
plt.show()
